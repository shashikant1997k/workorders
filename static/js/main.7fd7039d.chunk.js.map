{"version":3,"sources":["Component/Assigned.js","App.js","index.js"],"names":["Assigned","useState","allDate","setAllDate","newWorkList","setNewWorkList","empList","setEmpList","useEffect","dates","temp","monthName","workOrderList","job","forEach","val","i","workorders","v","d","Date","getDate","getMonth","getFullYear","push","Set","sort","a","b","temp1","employeeList","Employess","ind","undefined","Name","date","name","jobname","dateIndx","temp3","includes","indexOf","di","index","item","splice","className","onClick","console","log","map","data-id","onDrop","e","p","params","JSON","parse","dataTransfer","getData","target","innerHTML","alert","dataset","id","toDateString","list","handleOnDrop","onDragOver","stopPropagation","preventDefault","handleDragOver","draggable","onDragStart","setData","stringify","handleDragStart","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7fd7039d.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport employeeList from \"./Data/getEmployeeList.json\";\r\nimport workOrderList from \"./Data/getWorkOrderList.json\";\r\nimport \"../CSS/assigned.css\";\r\n\r\nfunction Assigned() {\r\n  const [allDate, setAllDate] = useState([]);\r\n  const [newWorkList, setNewWorkList] = useState([]);\r\n  const [empList, setEmpList] = useState([]);\r\n  useEffect(() => {\r\n    let dates = [];\r\n    let temp = [];\r\n    let monthName = [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n    ];\r\n\r\n    // Get all dates\r\n    workOrderList.job.forEach((val, i) => {\r\n      val.workorders.forEach((v) => {\r\n        let d = `${new Date(v.Date).getDate()}-${\r\n          monthName[new Date(v.Date).getMonth()]\r\n        }-${new Date(v.Date).getFullYear()}`;\r\n        dates.push(d);\r\n        temp.push(v.Date);\r\n      });\r\n    });\r\n    dates = [...new Set(dates)];\r\n    temp = [...new Set(temp)];\r\n\r\n    dates.sort((a, b) => new Date(a) - new Date(b));\r\n    temp.sort((a, b) => new Date(a) - new Date(b));\r\n    setAllDate(dates);\r\n\r\n    // Get all dates end\r\n\r\n    // modifing object to create the work assigned table for name and date\r\n    let temp1 = [];\r\n    employeeList.Employess.forEach((v, i) => {\r\n      dates.forEach((val, ind) => {\r\n        if (temp1[i] === undefined) {\r\n          temp1[i] = {};\r\n          temp1[i][\"name\"] = v.Name;\r\n          let d = {\r\n            date: val,\r\n            name: \"\",\r\n            jobname: \"\",\r\n          };\r\n          temp1[i][\"workorders\"] = [];\r\n          temp1[i][\"workorders\"].push(d);\r\n        } else {\r\n          temp1[i][\"name\"] = v.Name;\r\n          let d = {\r\n            date: val,\r\n            name: \"\",\r\n            jobname: \"\",\r\n          };\r\n          temp1[i][\"workorders\"].push(d);\r\n        }\r\n      });\r\n    });\r\n\r\n    setEmpList(temp1);\r\n\r\n    // modifing object to create the work assigned table for name and date end\r\n\r\n    // modifing object to print unassigned data\r\n    let temp3 = [];\r\n    let dateIndx;\r\n    workOrderList.job.forEach((val, i) => {\r\n      temp3[i] = {};\r\n      temp3[i][\"jobname\"] = val.jobname;\r\n      temp3[i][\"workorders\"] = [];\r\n      dateIndx = [];\r\n      val.workorders.forEach((v) => {\r\n        if (temp.includes(v.Date)) {\r\n          dateIndx.push(temp.indexOf(v.Date));\r\n          let a = {\r\n            name: v.name,\r\n            Date: v.Date,\r\n          };\r\n\r\n          temp3[i][\"workorders\"].push(a);\r\n        }\r\n      });\r\n\r\n      const insert = (index, item, arr) => {\r\n        return arr.splice(index, 0, item);\r\n      };\r\n\r\n      temp.forEach((d, di) => {\r\n        if (!dateIndx.includes(di)) {\r\n          let a = { name: \"\", Date: d };\r\n          insert(di, a, temp3[i][\"workorders\"]);\r\n        }\r\n      });\r\n    });\r\n    setNewWorkList(temp3);\r\n    // modifing object to print unassigned data end\r\n  }, []);\r\n\r\n  const handleDragStart = (e, params) => {\r\n    e.dataTransfer.setData(\"params\", JSON.stringify(params));\r\n  };\r\n\r\n  const handleOnDrop = (e, p) => {\r\n    let params = JSON.parse(e.dataTransfer.getData(\"params\"));\r\n    if (e.target.innerHTML !== \"\") {\r\n      alert(\"Already work assigned\");\r\n      return false;\r\n    }\r\n\r\n    if (\r\n      new Date(e.target.dataset.id).toDateString() ===\r\n      new Date(params.item.Date).toDateString()\r\n    ) {\r\n      // Remove data from unassigned list after drag and drop\r\n      let list = newWorkList.map((val) => {\r\n        if (val.jobname === params.jobname) {\r\n          return {\r\n            jobname: val.jobname,\r\n            workorders: val.workorders.map((v, i) => {\r\n              if (v.name === params.item.name) {\r\n                let aa = {\r\n                  name: \"\",\r\n                  Date: params.item.Date,\r\n                };\r\n                return aa;\r\n              } else {\r\n                return v;\r\n              }\r\n            }),\r\n          };\r\n        } else {\r\n          return {\r\n            jobname: val.jobname,\r\n            workorders: val.workorders,\r\n          };\r\n        }\r\n      });\r\n\r\n      setNewWorkList(list);\r\n\r\n      // Remove data from unassigned list after drag and drop end\r\n\r\n      // Add data in assigned list after drag and drop\r\n      let a = empList.map((val, ind) => {\r\n        if (ind === p.ind) {\r\n          let b = val.workorders.map((v, i) => {\r\n            if (i === p.i) {\r\n              return {\r\n                date: v[\"date\"],\r\n                name: params.item.name,\r\n                jobname: params.jobname,\r\n              };\r\n            } else {\r\n              return v;\r\n            }\r\n          });\r\n          return { name: val.name, workorders: b };\r\n        } else {\r\n          return val;\r\n        }\r\n      });\r\n\r\n      setEmpList(a);\r\n    } else {\r\n      alert(\"Date mismatch\");\r\n    }\r\n  };\r\n  const handleDragOver = (e) => {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  };\r\n\r\n  const saveData = () => {\r\n    console.log(empList);\r\n  };\r\n\r\n  return (\r\n    <div className=\"assigned\">\r\n      <div className=\"saveButton\">\r\n        <button onClick={saveData}>Save</button>\r\n      </div>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th></th>\r\n            {allDate.map((item, i) => {\r\n              return <th key={i}>{item}</th>;\r\n            })}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {empList.map((val, ind) => {\r\n            return (\r\n              <tr key={ind}>\r\n                <td className=\"empName\">{val.name}</td>\r\n                {val.workorders.map((item, i) => {\r\n                  return (\r\n                    <td\r\n                      className=\"workAssign\"\r\n                      key={i}\r\n                      data-id={item.date}\r\n                      onDrop={(e) => handleOnDrop(e, { ind, i })}\r\n                      onDragOver={(e) => handleDragOver(e)}\r\n                    >\r\n                      {item.name !== \"\" ? (\r\n                        <div className=\"con1\">\r\n                          <div>{item.name}</div>\r\n                          <div>{item.jobname}</div>\r\n                        </div>\r\n                      ) : null}\r\n                    </td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n\r\n      <table className=\"unassigned\">\r\n        <tbody>\r\n          {newWorkList.map((val, ind) => {\r\n            return (\r\n              <tr key={ind}>\r\n                <td className=\"workTD\"></td>\r\n                {val.workorders.map((item, i) => {\r\n                  return item.name !== \"\" ? (\r\n                    <td className=\"workTD\" key={i}>\r\n                      <div\r\n                        className=\"con1\"\r\n                        draggable\r\n                        onDragStart={(e) =>\r\n                          handleDragStart(e, {\r\n                            item,\r\n                            jobname: val.jobname,\r\n                            ind,\r\n                          })\r\n                        }\r\n                      >\r\n                        <div>{item.name}</div>\r\n                        <div>{val.jobname}</div>\r\n                      </div>\r\n                    </td>\r\n                  ) : (\r\n                    <td key={i} className=\"unassigned\"></td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Assigned;\r\n","import \"./App.css\";\nimport Assigned from \"./Component/Assigned\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Assigned />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}